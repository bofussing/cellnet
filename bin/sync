## COMMITTED TEST CHANGE

## STASHED TEST CHANGE


#!/bin/bash

LOCAL=~/,
REMOTE='uthpc:'
REPO=sanger

if [ $# -eq 0 ]; then
  echo TODO implement sync via git sync branch 
  exit 1
fi


push() {
  branch="$(git rev-parse --abbrev-ref HEAD)"

  # save uncommited changes
  git stash save 

  # go to sync 
  git branch sync || git checkout sync

  # merge changes from currently edited branch
  git merge -Xtheirs "$branch" -m "SYNC: copy state from $branch"
  git stash apply  # including copying the uncommited changes

  # commit and push
  git add -A m
  git commit -m "SYNC: push $branch from $HOSTNAME"
  git push 

  # got back and restore 
  git checkout $branch
  git stash pop
}


pull() {
  branch="$(git rev-parse --abbrev-ref HEAD)"

  # check if working tree clean
  if ! git diff-index --quiet HEAD --; then
    echo "ERROR: working tree is not clean"
    exit 1
  fi

  # save uncommited changes
  git stash save 

  # go to sync 
  git branch sync || git checkout sync

  # merge changes from currently edited branch
  git merge -Xtheirs "$branch" -m "SYNC: copy state from $branch"
  git stash apply  # including copying the uncommited changes

  # commit and push
  git add -A m
  git commit -m "SYNC: push $branch from $HOSTNAME"
  git push 

  # got back and restore 
  git checkout $branch
  git stash pop
}


  # overwrite 'sync' branch with current working tree
  


  # save local changes
  git add -A . 
  git stash save -m 'for sync: stash local changes before pulling remote changes'

  # pull remote changes
  git pull --rebase

  # reapply local changes
  git stash pop 

  # push local changes  
  git add -A .
  git commit -am "sync: push $HOSTNAME"

  git status



for act in "$@"; do
  if [ "$act" == "push" ] || [ "$act" = "push-overwrite" ]
  then SRC="$LOCAL/$REPO"; DEST="$REMOTE"

  elif [ "$act" == "pull" ] || [ "$act" != "pull-overwrite" ]
  then SRC="$REMOTE~/$REPO/results"; DEST="$LOCAL/$REPO"
  fi

  if [ "$act" == "push" ] || [ "$act" == "pull" ]
  then
    rsync -vPzr --executability --filter=':e- .gitignore' --filter "- .git/" \
      -e ssh "$SRC" "$DEST"

  elif [ "$act" == "push-overwrite" ] || [ "$act" == "pull-overwrite" ]
  then
    echo "WARNING: Possibly removing files in $DEST/$REPO!"
    read -p "  >> are you sure? Cancel with ^C <<  " -n 1 -r  
    
    rsync -vPzr --executability --filter=':e- .gitignore' --filter "- .git/" \
      -e ssh "$SRC" "$DEST" --delete-after 
  fi
done
